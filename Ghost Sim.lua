-- Public
local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
local NotificationHolder =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local player = game.Players.LocalPlayer

local function notif(title, des, time)
    Notification:Notify({
        Title = title,
        Description = des
    }, {
        OutlineColor = Color3.fromRGB(0, 255, 139),
        Time = time,
        Type = "default"
    })
end

local function nwarn(why, solve)
    Notification:Notify({
        Title = why,
        Description = solve
    }, {
        OutlineColor = Color3.fromRGB(0, 255, 139),
        Time = 5,
        Type = "image"
    }, {
        Image = "http://www.roblox.com/asset/?id=6023426923",
        ImageColor = Color3.fromRGB(255, 166, 0)
    })
end

local function nerror(why)
    Notification:Notify({
        Title = "ERROR",
        Description = why
    }, {
        OutlineColor = Color3.fromRGB(0, 255, 139),
        Time = 5,
        Type = "image"
    }, {
        Image = "http://www.roblox.com/asset/?id=6023426923",
        ImageColor = Color3.fromRGB(255, 0, 0)
    })
end

local function getgums(count)
    local listwithcount = {}
    local listwithout = {}
    for i, v in pairs(player.PlayerGui.UI.MainGui.CharacterMenu.MainFrame.Pages.Items.ItemList.Container:GetChildren()) do
        if v:FindFirstChild('Entry') and v.Title.Text:find('Gum') then
            table.insert(listwithcount, v.Title.Text .. ' ' .. v.Quantity.Text)
            table.insert(listwithout, v.Title.Text)
        end
    end
    if count == 'yes' then
        return listwithcount
    elseif count == 'no' then
        return listwithout
    end
end

function getalllootandchest()
    local tablelist = {}
    for i, v in pairs(player.PlayerGui.UI.MainGui.CharacterMenu.MainFrame.Pages.Items.ItemList.Container:GetChildren()) do
        if v:FindFirstChild('Entry') then
            if v.Title.Text:find('Lootbag') or v.Title.Text:find('Chest') then
                table.insert(tablelist, v.Name)
            end
        end
    end
    return tablelist
end

local function getdetails(item, type)
    for i, v in pairs(player.PlayerGui.UI.MainGui.CharacterMenu.MainFrame.Pages.Items.ItemList.Container:GetChildren()) do
        if type == 'id' then
            if v:FindFirstChild('Entry') and v.Title.Text == item then
                return tonumber(v.Name)
            end
        elseif type == 'count' then
            if v:FindFirstChild('Entry') and v.Title.Text == item then
                return v.Quantity.Text
            end
        end
    end
end

local function check_vac()
    if player.PlayerGui.UI.MainGui.VacuumBoardStatus.VacuumIcon.Light.ImageColor3 == Color3.fromRGB(255, 0, 0) then
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StartUseVacuum
        Event:FireServer()
    elseif player.PlayerGui.UI.MainGui.VacuumBoardStatus.VacuumIcon.Light.ImageColor3 == Color3.fromRGB(0, 255, 0) then
    end
    return
end

local Window = Library:CreateWindow({
    Title = 'Ghost Sim | FallAngle Hub | https://discord.gg/rq5fXGKWQY',
    Center = false,
    AutoShow = true
})

notif("Welcome " .. tostring(player),
    'Thank you for using FallAngelHub make sure you join the server for updates https://discord.gg/rq5fXGKWQY', 5)

local vu = game:GetService("VirtualUser")

game:GetService("Players").LocalPlayer.Idled:connect(function()
    vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)

    wait(1)

    vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

game.Players.LocalPlayer.Stats.BoardsUnlocked.Value = true

game.Players.LocalPlayer.Stats.ParachuteUnlocked.Value = true

game.Players.LocalPlayer.Stats.JetpackUnlocked.Value = true

game.Players.LocalPlayer.Stats.HeavyArmorUnlocked.Value = true

game.Players.LocalPlayer.Stats.MagnetismUnlocked.Value = true

game.Players.LocalPlayer.Stats.TurbochargerUnlocked.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleRems.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleTokens.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.Agility.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleRange.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleBossDrops.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleItems.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleGems.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleLuck.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.QuickUnbox.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.AutoUnbox.Value = true

game.Players.LocalPlayer.Stats.AppliedPasses.DoubleSouls.Value = true

game:GetService("ReplicatedStorage").Data.ServerDoubleDrops.Value = true

game:GetService("ReplicatedStorage").Data.ServerDoubleEvent.Value = true

game:GetService("ReplicatedStorage").Data.ServerDoubleGems.Value = true

game:GetService("ReplicatedStorage").Data.ServerDoubleLuck.Value = true

local bossN = nil

-- maps

local mainhub = 2685347741

local ghostworld = 4078003854

local backdoor = 4383092793

local thevoid = 6036368776

local remnant = 10252702151

local bloxbyte = 5061426732

local Tabs = {
    Farm = Window:AddTab('Farm'),
    BoxFarm = Window:AddTab('BoxFarm'),
    Other = Window:AddTab('Other'),

    ['UI Settings'] = Window:AddTab('UI Settings')
}

local Farmingbox = Tabs.Farm:AddLeftGroupbox('Farming')
local otherfarmingbox = Tabs.Farm:AddRightGroupbox('Other')
local useitemsbox = Tabs.Farm:AddRightGroupbox('Use items')

useitemsbox:AddDropdown('gumlist', {
    Values = getgums('no'),
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    Text = 'Gum list',
    Tooltip = 'List of gums currently having' -- Information shown when you hover over the textbox
})

useitemsbox:AddToggle('autoeatgum', {
    Text = 'Auto eat gum',
    Default = false, -- Default value (true / false)
    Tooltip = 'Eats gum selected' -- Information shown when you hover over the toggle
})

Toggles.autoeatgum:OnChanged(function()
    task.spawn(function()
        while task.wait(1) do
            if not player.Stats.GumActive.Value and Toggles.autoeatgum.Value then
                local str = getdetails(Options.gumlist.Value, 'id')
                game:GetService("ReplicatedStorage").Network.ToServer.Requests.UseItem:FireServer(str)
            end
        end
    end)
end)

useitemsbox:AddToggle('autolootbagandchest', {
    Text = 'Auto open lootbag/chest',
    Default = false, -- Default value (true / false)
    Tooltip = 'opens all lootbags/chest' -- Information shown when you hover over the toggle
})

Toggles.autolootbagandchest:OnChanged(function()
    task.spawn(function()
        while task.wait() and Toggles.autolootbagandchest.Value do
            for i, v in pairs(getalllootandchest()) do
                game:GetService("ReplicatedStorage").Network.ToServer.Requests.UseItem:FireServer(tonumber(v))
            end
        end
    end)
end)

Options.gumlist:OnChanged(function()
    notif('Gum details:', Options.gumlist.Value .. ' ' .. getdetails(Options.gumlist.Value, 'count'), 3)
end)

local rebirths_has = player.Stats.Rebirth.Total.Value
local function ghost_todo()
    local lvl = game.Players.LocalPlayer.Stats.AntennaLevel.Value
    if lvl > 9 and lvl <= 10 and game.PlaceId ~= mainhub then
        local A_1 = "GhostWorld"
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.TransportToPlace
        Event:FireServer(A_1)
    elseif lvl > 10 and lvl < 20 and game.PlaceId ~= backdoor then
        local A_1 = "Backdoor"
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.TransportToPlace
        Event:FireServer(A_1)
    elseif lvl >= 20 and rebirths_has == 1 and game.PlaceId ~= remnant then
        print("passed")
        local A_1 = "RemnantZone"
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.TransportToPlace
        Event:FireServer(A_1)
    end
    if game.PlaceId == mainhub then
        if lvl == 1 then
            return {"Fairy", "Owl"}
        elseif lvl == 2 then
            return {"Businessman", "Street Cat"}
        elseif lvl == 3 then
            return {"Mechanic", "Garbage Bin"}
        elseif lvl == 4 then
            return {"Paper Bag Man", "Rat"}
        elseif lvl == 5 then
            return {"Bandit", "Cowboy"}
        elseif lvl == 6 then
            return {"Scientist", "Zorg"}
        elseif lvl == 7 then
            return {"Miner", "Living rock"}
        elseif lvl == 8 then
            return {"Pirate", "Parrot"}
        elseif lvl == 9 then
            return {"Diver", "Magma Monster"}
        end
    elseif game.PlaceId == ghostworld then
        if lvl > 10 and lvl < 10 then
            return {"Jester", "Pinwheel", "Spooky", "Jelly", "Blue Ray", "Pixie", "Rogue", "Wizard", "Knight", "Horse",
                    "Bongo Man", "DJ", "Yellow Note", "Purple Note", "Viney", "Adventurer", "Blooming", "Dragonfly"}
        end
    elseif game.PlaceId == backdoor then
        if lvl == 11 then
            return {"Swamp Dweller", "Firefly"}
        elseif lvl == 12 then
            return {"Frost Spirit", "Snowstorm"}
        elseif lvl == 13 then
            return {"Flutter Spirit", "Mushroom"}
        elseif lvl == 14 then
            return {"Water Spirit", "Glitcher"}
        elseif lvl == 15 then
            return {"Farmer", "Crazy Cow"}
        elseif lvl == 16 then
            return {"Parasite", "Super Computer"}
        elseif lvl == 17 then
            return {"Digital Bandit", "Trojan Horse"}
        elseif lvl == 18 then
            return {"Web Surfer", "Binary"}
        elseif lvl == 19 then
            return {"Byte", "Digi Cat"}
        elseif lvl == 20 and rebirths_has ~= 1 then
            return {"Guardian", "Data Fury"}
        end
    elseif game.PlaceId == remnant then
        if lvl == 20 then
            return {"Autumn Jungler", "Durian Bunny"}
        elseif lvl == 21 then
            return {"Night Wizard", "Aqua Parrot"}
        elseif lvl == 22 then
            return {"Gem Troll", "Gryffin"}
        elseif lvl == 23 then
            return {"Village Raider", "Pig"}
        elseif lvl == 24 then
            return {"Scrap Hunter", "Floppy Slime"}
        elseif lvl == 25 then
            return {"Sea Walker", "Fish Footman"}
        elseif lvl >= 26 then
            return {"Cave Ninja", "Axolotl Princess"}
        else
            return nil
        end
    end
end

Farmingbox:AddToggle('smartfarm', {
    Text = 'Smart farm',
    Default = false, -- Default value (true / false)
    Tooltip = 'Farms the correct level for you.' -- Information shown when you hover over the toggle
})

Toggles.smartfarm:OnChanged(function()
    if Toggles.smartfarm.Value == true then
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StartUseVacuum
        Event:FireServer()
    elseif Toggles.smartfarm.Value == false then
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StopUseVacuum
        Event:FireServer()
    end
end)
Toggles.smartfarm:OnChanged(function()
    task.spawn(function()
        while task.wait(.1) and Toggles.smartfarm.Value do
            for i, ghost in pairs(game:GetService("Workspace").Ghosts:GetChildren()) do
                if table.find(ghost_todo(), ghost.Name) then
                    if not player.Character then
                        return
                    end
                    if ghost:FindFirstChild("HumanoidRootPart") and ghost:FindFirstChild("Health") then
                        repeat
                            check_vac()
                            player.Character.HumanoidRootPart.CFrame =
                                ghost.HumanoidRootPart.CFrame * CFrame.new(0, 0, 5)
                            game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumEnemy:FireServer(ghost)
                            task.wait()
                        until ghost.Health.Value <= 0.1 or Toggles.smartfarm.Value == false
                    end
                end
            end
        end
    end)
end)
Farmingbox:AddDivider()

local mainhub_arealist = {"Forest", "BloxCity", "JunkYard", "Sewer", "WildWest", "Area51", "Mine", "Beach",
                          "UnderWater", "Volcano"}

local ghostworld_arealist = {"GhostlyIslandT1", "GhostlyIslandT2", "GhostlyIslandT3", "CastleBottom", "CastleTop",
                             "MusicMeadowsT1", "MusicMeadowsT2", "HauntedCastleT1", "HauntedCastleT2"}

local backdoor_arealist = {"Swamplands", "Winter_Tundra", "Mushroom_Forest", "Twisting_River", "Crystal_Cave", "Farm",
                           "Spaceship", "Barn", "Behive", "Data_Stream", "Reverse_City", "Agents_HQ"}

local thevoid_arealist = {"Covenk", "Didi", "Makkie", "Thex", "Goro"}

local rement_arealist = {"EnchantedJungle", "BlueForest", "CrystalCanyon", "FloatingBridge", "ScrapCity",
                         "UnderwaterRuins", "HiddenCaverns"}

if game.PlaceId == mainhub then
    Farmingbox:AddDropdown('Areafarmbox', {
        Values = mainhub_arealist,
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected

        Text = 'Select what area to farm',
        Tooltip = 'Farm a area given' -- Information shown when you hover over the textbox
    })
elseif game.PlaceId == ghostworld then
    Farmingbox:AddDropdown('Areafarmbox', {
        Values = ghostworld_arealist,
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected

        Text = 'Select what area to farm',
        Tooltip = 'Farm a area given' -- Information shown when you hover over the textbox
    })
elseif game.PlaceId == backdoor then
    Farmingbox:AddDropdown('Areafarmbox', {
        Values = backdoor_arealist,
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected

        Text = 'Select what area to farm',
        Tooltip = 'Farm a area given' -- Information shown when you hover over the textbox
    })
elseif game.PlaceId == thevoid then
    Farmingbox:AddDropdown('Areafarmbox', {
        Values = thevoid_arealist,
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected

        Text = 'Select what area to farm',
        Tooltip = 'Farm a area given' -- Information shown when you hover over the textbox
    })
elseif game.PlaceId == remnant then
    Farmingbox:AddDropdown('Areafarmbox', {
        Values = rement_arealist,
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected

        Text = 'Select what area to farm',
        Tooltip = 'Farm a area given' -- Information shown when you hover over the textbox
    })
end

local areasel = {}

Options.Areafarmbox:OnChanged(function()
    areasel = {}
    for key, value in next, Options.Areafarmbox.Value do
        table.insert(areasel, key)
    end
end)

local function ghost_list_giver(selarea)
    -- MAINHUB
    local Forest = { -- 1
    "Fairy", "Owl"}

    local BloxCity = { -- 2
    "Businessman", "Street Cat"}

    local JunkYard = { -- 3
    "Mechanic", "Garbage Bin"}

    local Sewer = { -- 4
    "Paper Bag Man", "Rat"}

    local WildWest = { -- 5
    "Bandit", "Cowboy"}

    local Area51 = { -- 6
    "Scientist", "Zorg"}

    local Mine = { -- 7
    "Miner", "Living Rock"}

    local Beach = { -- 8
    "Pirate", "Parrot"}

    local UnderWater = { -- 9
    "Diver", "Mermaid"}

    local Volcano = { -- 10
    "Islander", "Magma Monster"}

    -- GHOST WORLD
    local GhostlyIslandT1 = { -- 10
    "Jester", "Jelly"}

    local GhostlyIslandT2 = { -- 10
    "Pinwheel", "Blue Ray"}

    local GhostlyIslandT3 = { -- 10
    "Spooky", "Pixie"}

    local CastleBottom = { -- 10
    "Rogue", "Knight"}

    local CastleTop = { -- 10
    "Wizard", "Horse"}

    local MusicMeadowsT1 = { -- 10
    "Bongo man", "Yellow Note"}

    local MusicMeadowsT2 = { -- 10
    "DJ", "Purple Note"}

    local HauntedCastleT1 = { -- 10
    "Viney", "Blooming"}

    local HauntedCastleT2 = { -- 10
    "Adventurer", "Dragonfly"}

    -- backdoor

    local Swamplands = {"Swamp Dweller", "Firefly"}
    local Winter_Tundra = {"Frost Spirit", "Snowstorm"}
    local Mushroom_Forest = {"Flutter Spirit", "Mushroom"}
    local Twisting_River = {"Water Spirit", "Glitcher"}
    local Crystal_Cave = {"Error 404", "Rock Crystal"}
    local Farm = {"Farmer", "Crazy Cow"}
    local Spaceship = {"Parasite", "Super Computer"}
    local Barn = {"Digital Bandit", "Trojan Horse"}
    local Behive = {"Honeydrop", "Bee"}
    local Data_Stream = {"Web Surfer", "Binary"}
    local Reverse_City = {"Byte", "Digi Cat"}
    local Agents_HQ = {"Programmer", "RAM"}

    -- thevoid
    local Covenk = {"Petal"}

    local Didi = {"Heated"}

    local Makkie = {"Slime"}

    local Thex = {"Storm"}

    local Goro = {"Tech"}

    -- rement
    local EnchantedJungle = { -- 20
    "Autumn Jungler", "Durian Bunny"}

    local BlueForest = { -- 21
    "Night Wizard", "Aqua Parrot"}

    local CrystalCanyon = { -- 22
    "Gem Troll", "Gryffin"}

    local FloatingBridge = { -- 23
    "Village Raider", "Pig"}

    local ScrapCity = { -- 24
    "Scrap Hunter", "Floppy Slime"}

    local UnderwaterRuins = { -- 25
    "Sea Walker", "Fish Footman"}

    local HiddenCaverns = { -- 26
    "Cave Ninja", "Axolotl Princess"}

    if selarea == "Forest" then
        return Forest
    elseif selarea == "BloxCity" then
        return BloxCity
    elseif selarea == "JunkYard" then
        return JunkYard
    elseif selarea == "Sewer" then
        return Sewer
    elseif selarea == "WildWest" then
        return WildWest
    elseif selarea == "Area51" then
        return Area51
    elseif selarea == "Mine" then
        return Mine
    elseif selarea == "Beach" then
        return Beach
    elseif selarea == "UnderWater" then
        return UnderWater
    elseif selarea == "Volcano" then
        return Volcano

    elseif selarea == "GhostlyIslandT1" then
        return GhostlyIslandT1
    elseif selarea == "GhostlyIslandT2" then
        return GhostlyIslandT2
    elseif selarea == "GhostlyIslandT3" then
        return GhostlyIslandT3
    elseif selarea == "CastleBottom" then
        return CastleBottom
    elseif selarea == "CastleTop" then
        return CastleTop
    elseif selarea == "MusicMeadowsT1" then
        return MusicMeadowsT1
    elseif selarea == "MusicMeadowsT2" then
        return MusicMeadowsT2
    elseif selarea == "HauntedCastleT1" then
        return HauntedCastleT1
    elseif selarea == "HauntedCastleT2" then
        return HauntedCastleT2

    elseif selarea == "Swamplands" then
        return Swamplands
    elseif selarea == "Winter_Tundra" then
        return Winter_Tundra
    elseif selarea == "Mushroom_Forest" then
        return Mushroom_Forest
    elseif selarea == "Twisting_River" then
        return Twisting_River
    elseif selarea == "Crystal_Cave" then
        return Crystal_Cave
    elseif selarea == "Farm" then
        return Farm
    elseif selarea == "Spaceship" then
        return Spaceship
    elseif selarea == "Barn" then
        return Barn
    elseif selarea == "Behive" then
        return Behive
    elseif selarea == "Data_Stream" then
        return Data_Stream
    elseif selarea == "Reverse_City" then
        return Reverse_City
    elseif selarea == "Agents_HQ" then
        return Agents_HQ

    elseif selarea == "Covenk" then
        return Covenk
    elseif selarea == "Didi" then
        return Didi
    elseif selarea == "Makkie" then
        return Makkie
    elseif selarea == "Thex" then
        return Thex
    elseif selarea == "Goro" then
        return Goro

    elseif selarea == "EnchantedJungle" then
        return EnchantedJungle
    elseif selarea == "BlueForest" then
        return BlueForest
    elseif selarea == "CrystalCanyon" then
        return CrystalCanyon
    elseif selarea == "FloatingBridge" then
        return FloatingBridge
    elseif selarea == "ScrapCity" then
        return ScrapCity
    elseif selarea == "UnderwaterRuins" then
        return UnderwaterRuins
    elseif selarea == "HiddenCaverns" then
        return HiddenCaverns
    end
end

local function area_combine()
    local list = {}
    for i, area in pairs(areasel) do
        for i, ghost in pairs(ghost_list_giver(area)) do
            table.insert(list, ghost)
        end
    end
    return list
end

Farmingbox:AddToggle('areafarm', {
    Text = 'Area farm',
    Default = false, -- Default value (true / false)
    Tooltip = 'Make sure you choice a area to farm' -- Information shown when you hover over the toggle
})

Toggles.areafarm:OnChanged(function()
    local player = game.Players.LocalPlayer
    if Toggles.areafarm.Value == true then
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StartUseVacuum
        Event:FireServer()
    elseif Toggles.areafarm.Value == false then
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StopUseVacuum
        Event:FireServer()
    end

    spawn(function()
        while Toggles.areafarm.Value == true do
            for i, v in pairs(workspace.Ghosts:GetChildren()) do
                for _, ghost in pairs(area_combine()) do
                    if v.Name == ghost and v:FindFirstChild("HumanoidRootPart") and Toggles.areafarm.Value == true and
                        v:FindFirstChild('Health') then
                        while v.Health.Value > 0.1 and Toggles.areafarm.Value == true do
                            player.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 5)
                            game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumEnemy:FireServer(v)
                            task.wait()
                        end
                    end
                end
            end
            task.wait()
        end
    end)
end)

Farmingbox:AddDivider()

Farmingbox:AddToggle('autofarmall', {
    Text = 'Auto farm all ghosts',
    Default = false, -- Default value (true / false)
    Tooltip = 'Kills every ghost you' -- Information shown when you hover over the toggle
})

Toggles.autofarmall:OnChanged(function()
    local player = game.Players.LocalPlayer
    if Toggles.autofarmall.Value == true then
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StartUseVacuum
        Event:FireServer()
    elseif Toggles.autofarmall.Value == false then
        local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StopUseVacuum
        Event:FireServer()
    end

    spawn(function()
        while Toggles.autofarmall.Value == true do
            for i, v in pairs(workspace.Ghosts:GetChildren()) do
                if v:FindFirstChild("HumanoidRootPart") and Toggles.autofarmall.Value == true and
                    v:FindFirstChild('Health') and v.Name ~= "Lucky Cat" and v.Name ~= "Dino King" and v.Name ~=
                    "Jolly Roger" and v.Name ~= "Anonymous" then
                    while v.Health.Value > 0.1 and Toggles.autofarmall.Value == true do
                        player.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 5)
                        game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumEnemy:FireServer(v)
                        task.wait()
                    end
                end
            end
        end
        task.wait()
    end)
end)

otherfarmingbox:AddToggle('autokill', {
    Text = 'Auto kill closest',
    Default = false, -- Default value (true / false)
    Tooltip = 'Kills every ghost near you' -- Information shown when you hover over the toggle
})

Toggles.autokill:OnChanged(function()
    spawn(function()
        local player = game.Players.LocalPlayer
        local distance = player.Stats.VacuumRange.Value
        while Toggles.autokill.Value == true do
            for i, v in pairs(workspace.Ghosts:GetChildren()) do
                if v:FindFirstChild("HumanoidRootPart") then
                    local magnitude =
                        (player.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
                    if magnitude > 50 and magnitude < distance then
                        local args = {
                            [1] = workspace.Ghosts:FindFirstChild(v)
                        }

                        game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumFireHit:FireServer(unpack(
                            args))
                    elseif magnitude < distance then
                        game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumEnemy:FireServer(v)
                    end
                end
            end
            task.wait()
        end
    end)
end)

otherfarmingbox:AddToggle('autosell', {
    Text = 'Auto sell',
    Default = false, -- Default value (true / false)
    Tooltip = 'Sells when pack is full/empty' -- Information shown when you hover over the toggle
})

function sell()
    for i, folder in pairs(game:GetService("Workspace").ScriptParts:GetChildren()) do
        if folder.Name:match('Converters') or folder.Name:match('Chargers') then
            for i, part in pairs(folder:GetChildren()) do
                if part:IsA('Part') then
                    firetouchinterest(player.Character.Head, part, 1)
                    firetouchinterest(player.Character.Head, part, 0)
                end
            end
        end
    end
end

Toggles.autosell:OnChanged(function()
    spawn(function()
        while task.wait() and Toggles.autosell.Value do
            sell()
        end
    end)
end)

otherfarmingbox:AddToggle('autoantenna', {
    Text = 'Auto Antenna upgrade',
    Default = false, -- Default value (true / false)
    Tooltip = 'Upgrades your antenna when all requiements are met' -- Information shown when you hover over the toggle
})

Toggles.autoantenna:OnChanged(function()
    spawn(function()
        while Toggles.autoantenna.Value == true do
            game:GetService("ReplicatedStorage").Network.ToServer.Requests.UpgradeAntenna:FireServer()
            task.wait()
        end
    end)
end)

if game.PlaceId == mainhub then
    local MyButton = otherfarmingbox:AddButton('Quick Win Race', function()
        local lp = game.Players.LocalPlayer
        local char = lp.Character
        local function bypassTP(cf, time)
            local hrp = char.PrimaryPart
            local ts = game:GetService("TweenService")
            ts:Create(hrp, TweenInfo.new(time, Enum["EasingStyle"].Linear), {
                CFrame = cf
            }):Play()
        end
        bypassTP(CFrame.new(5330, -160, 1091), 14)
    end)
end

--- BOXING FARM

local OpenPetCrate = Tabs.BoxFarm:AddLeftGroupbox('Pet Crate')

local list_of_pet_crates = {"Crate #1", "Crate #2", "Crate #3", "Crate #4", "Crate #5", "Crate #6", "Crate #7",
                            "Crate #8", "Crate #9", "Crate #10", "Crate #11", "Crate #13", "Crate #14", "Crate #15"}

OpenPetCrate:AddDropdown('autopetcratedrop', {
    Values = list_of_pet_crates,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Pet crates',
    Tooltip = 'Select one and enable to auto buy' -- Information shown when you hover over the textbox
})

local petcratesel = nil

Options.autopetcratedrop:OnChanged(function()
    local sel = Options.autopetcratedrop.Value
    if sel == "Crate #1" then
        petcratesel = 1
    elseif sel == "Crate #2" then
        petcratesel = 2
    elseif sel == "Crate #3" then
        petcratesel = 3
    elseif sel == "Crate #4" then
        petcratesel = 4
    elseif sel == "Crate #5" then
        petcratesel = 5
    elseif sel == "Crate #6" then
        petcratesel = 7
    elseif sel == "Crate #7" then
        petcratesel = 8
    elseif sel == "Crate #8" then
        petcratesel = 9
    elseif sel == "Crate #9" then
        petcratesel = 10
    elseif sel == "Crate #10" then
        petcratesel = 11
    elseif sel == "Crate #11" then
        petcratesel = 12
    elseif sel == "Crate #13" then
        petcratesel = 14
    elseif sel == "Crate #14" then
        petcratesel = 15
    elseif sel == "Crate #15" then
        petcratesel = 16
    end
end)

OpenPetCrate:AddToggle('auto_pet_box', {
    Text = 'Auto open pet create',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will auto buy pet crates selected' -- Information shown when you hover over the toggle
})

Toggles.auto_pet_box:OnChanged(function()
    spawn(function()
        while Toggles.auto_pet_box.Value == true do
            local A_1 = petcratesel
            local A_2 = false
            local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.OpenPetCrate
            Event:FireServer(A_1, A_2)
            task.wait()
        end
    end)
end)

local OpenboardCrate = Tabs.BoxFarm:AddLeftGroupbox('Board Crate')

local list_of_board_crates = {"Board Crate #1", "Board Crate #2", "Board Crate #3", "Board Crate #4", "Board Crate #5",
                              "Board Crate #6"}

OpenboardCrate:AddDropdown('autoboardcratedrop', {
    Values = list_of_board_crates,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select board create',
    Tooltip = 'Select one and enable to auto buy' -- Information shown when you hover over the textbox
})

OpenboardCrate:AddToggle('auto_board_box', {
    Text = 'Auto open board create',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will auto buy board crates selected' -- Information shown when you hover over the toggle
})

local boardcratesel = nil

Options.autoboardcratedrop:OnChanged(function()
    local sel = Options.autoboardcratedrop.Value
    if sel == "Board Crate #1" then
        boardcratesel = 1
    elseif sel == "Board Crate #2" then
        boardcratesel = 2
    elseif sel == "Board Crate #3" then
        boardcratesel = 3
    elseif sel == "Board Crate #4" then
        boardcratesel = 4
    elseif sel == "Board Crate #5" then
        boardcratesel = 5
    elseif sel == "Board Crate #6" then
        boardcratesel = 6
    end
end)

Toggles.auto_board_box:OnChanged(function()
    spawn(function()
        while Toggles.auto_board_box.Value == true do
            local A_1 = boardcratesel
            local A_2 = false
            local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.OpenBoardCrate
            Event:FireServer(A_1, A_2)
            task.wait()
        end
    end)
end)

otherfarmingbox:AddDivider()

otherfarmingbox:AddToggle('autostartquest', {
    Text = 'Auto start quests',
    Default = false, -- Default value (true / false)
    Tooltip = 'Starts all the quests' -- Information shown when you hover over the toggle
})

Toggles.autostartquest:OnChanged(function()
    spawn(function()
        while Toggles.autostartquest.Value == true do
            for i = -50, 500 do
                local args = {
                    [1] = i
                }

                game:GetService("ReplicatedStorage").Network.ToServer.Requests.StartQuest:FireServer(unpack(args))

                task.wait()
            end
        end
    end)
end)

otherfarmingbox:AddToggle('autoclaimquest', {
    Text = 'Auto claim quests',
    Default = false, -- Default value (true / false)
    Tooltip = 'Starts all the quests' -- Information shown when you hover over the toggle
})

Toggles.autoclaimquest:OnChanged(function()
    spawn(function()
        while Toggles.autoclaimquest.Value == true do
            for i = 1, 500 do
                local args = {
                    [1] = i
                }

                game:GetService("ReplicatedStorage").Network.ToServer.Requests.AdvanceQuest:FireServer(unpack(args))

                task.wait()
            end
        end
    end)
end)

local currency_finder = {
    [mainhub] = "Tokens",
    [ghostworld] = "Souls",
    [backdoor] = "Bits",
    [remnant] = "Rems"
}

-- vacuum
local function find_best_current_vac()
    local player = game.Players.LocalPlayer
    local has_vaccum = player.Inventory.Vacuums:GetChildren()
    local highestnumber = 0
    for i, v in pairs(has_vaccum) do
        local number = tonumber(v.Name)
        if number > highestnumber then
            highestnumber = number
        end
    end
    return highestnumber
end

local function bestvac(highest)
    local player = game.Players.LocalPlayer
    local current_curr = currency_finder[game.PlaceId]
    local bal = player.Stats[currency_finder[game.PlaceId]].Value

    for i, v in pairs(game:GetService("ReplicatedStorage").Items.Vacuums:GetChildren()) do
        if v.Name ~= "Module" then
            local PurchaseCurrency = v.Info.PurchaseCurrency.Value
            local price = v.Info.Price.Value
            if tonumber(v.Name) > tonumber(highest) and PurchaseCurrency == current_curr and bal > price then
                return v.Name
            end
        end
    end
end

-- pack
local function find_best_current_pack()
    local player = game.Players.LocalPlayer
    local has_vaccum = player.Inventory.Packs:GetChildren()
    local highestnumber = 0
    for i, v in pairs(has_vaccum) do
        local number = tonumber(v.Name)
        if number > highestnumber then
            highestnumber = number
        end
    end
    return highestnumber
end

local function bestvac_pack(highest)
    local player = game.Players.LocalPlayer
    local current_curr = currency_finder[game.PlaceId]
    local bal = player.Stats[currency_finder[game.PlaceId]].Value

    for i, v in pairs(game:GetService("ReplicatedStorage").Items.Packs:GetChildren()) do
        if v.Name ~= "Module" then
            local PurchaseCurrency = v.Info.PurchaseCurrency.Value
            local price = v.Info.Price.Value
            if tonumber(v.Name) > tonumber(highest) and PurchaseCurrency == current_curr and bal > price then
                return v.Name
            end
        end
    end
end

local buyingbox = Tabs.Farm:AddRightGroupbox('Buying/Equip')

buyingbox:AddToggle('autobuybestvac', {
    Text = 'Auto buy best vacuum',
    Default = false, -- Default value (true / false)
    Tooltip = 'Buys the best vacuum for you' -- Information shown when you hover over the toggle
})

Toggles.autobuybestvac:OnChanged(function()
    local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StartUseVacuum
    Event:FireServer()
    spawn(function()
        while Toggles.autobuybestvac.Value do
            local ohNumber1 = bestvac(find_best_current_vac())
            game:GetService("ReplicatedStorage").Network.ToServer.Requests.PurchaseVacuum:FireServer(ohNumber1)
            task.wait()
        end
    end)
end)

buyingbox:AddToggle('autobuybestbac', {
    Text = 'Auto buy best pack',
    Default = false, -- Default value (true / false)
    Tooltip = 'Buys the best pack for you' -- Information shown when you hover over the toggle
})

Toggles.autobuybestbac:OnChanged(function()
    local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.StartUseVacuum
    Event:FireServer()
    spawn(function()
        while Toggles.autobuybestbac.Value do
            local ohNumber1 = bestvac_pack(find_best_current_pack())
            game:GetService("ReplicatedStorage").Network.ToServer.Requests.PurchasePack:FireServer(ohNumber1)
            task.wait()
        end
    end)
end)

buyingbox:AddDivider()

local bestvac = buyingbox:AddButton('Equip best vacuum', function()
    local ohNumber1 = find_best_current_vac()
    game:GetService("ReplicatedStorage").Network.ToServer.Requests.EquipVacuum:FireServer(ohNumber1)
end)

local bestvac = buyingbox:AddButton('Equip best pack', function()
    local ohNumber1 = find_best_current_pack()
    game:GetService("ReplicatedStorage").Network.ToServer.Requests.EquipPack:FireServer(ohNumber1)
end)

-- bosses

local mainhubb = {"Ghastly Tree", "George the Gorilla", "Sludge", "Subject One", "King Krab", "Magmoraug", "Lucky Cat",
                  "Dino King"}

local ghostworldb = {"Grim", "Jolly Roger", "Lucky Cat"}

local thevoidb = {"Boss Bo"}

local backdoorb = {"Anomaly", "Lucky Cat", "Anonymous"}

local bloxbyteb = {"Final Boss", "Pillar", "Void Eye"}

local remnantb = {"Spade Harbinger"}

local bossfarmingbox = Tabs.Farm:AddLeftGroupbox('Boss farming')

list_of_bosses_in_current_world = nil

if game.PlaceId == mainhub then
    list_of_bosses_in_current_world = mainhubb
elseif game.PlaceId == ghostworld then
    list_of_bosses_in_current_world = ghostworldb
elseif game.PlaceId == thevoid then
    list_of_bosses_in_current_world = thevoidb
elseif game.PlaceId == backdoor then
    list_of_bosses_in_current_world = backdoorb
elseif game.PlaceId == bloxbyte then
    list_of_bosses_in_current_world = bloxbyteb
elseif game.PlaceId == remnant then
    list_of_bosses_in_current_world = remnantb
end

bossfarmingbox:AddDropdown('bossseldrop', {
    Values = list_of_bosses_in_current_world,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Bosses list',
    Tooltip = 'Select one and farm them' -- Information shown when you hover over the textbox
})

Options.bossseldrop:OnChanged(function()
    bossN = Options.bossseldrop.Value
end)

bossfarmingbox:AddToggle('autoboss', {
    Text = 'Auto farm boss',
    Default = false, -- Default value (true / false)
    Tooltip = 'Farms selected boss' -- Information shown when you hover over the toggle
})

Toggles.autoboss:OnChanged(function()
    spawn(function()
        while Toggles.autoboss.Value == true do

            for i, v in pairs(workspace.Ghosts:GetChildren()) do
                if v.Name == bossN and v:FindFirstChild("HumanoidRootPart") and Toggles.autoboss.Value == true then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame *
                                                                                     CFrame.new(0, 0, 10)

                    local remote = game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumEnemy

                    remote:FireServer(v)
                end
                task.wait()
            end
        end
    end)
end)

bossfarmingbox:AddToggle('autohitboss', {
    Text = 'Auto hit boss',
    Default = false, -- Default value (true / false)
    Tooltip = 'Hits the boss for you' -- Information shown when you hover over the toggle
})

Toggles.autohitboss:OnChanged(function()
    spawn(function()
        while Toggles.autohitboss.Value == true do
            local args = {
                [1] = workspace.Ghosts:FindFirstChild(bossN)
            }

            game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumFireHit:FireServer(unpack(args))

            task.wait()
        end
    end)
end)

local anticorr = bossfarmingbox:AddButton('Anti Corruption', function()
    local plr = game:GetService("Players").LocalPlayer
    workspace[plr.Name].Corruption.Value = math.huge
end)
anticorr:AddTooltip('God mode ;)')

bossfarmingbox:AddToggle('autouseEB', {
    Text = 'Auto Use Event Bait',
    Default = false, -- Default value (true / false)
    Tooltip = 'Automatically skip boss timer or race timer' -- Information shown when you hover over the toggle
})

Toggles.autouseEB:OnChanged(function()
    spawn(function()
        while Toggles.autouseEB.Value == true do
            local A_1 = 32
            local Event = game:GetService("ReplicatedStorage").Network.ToServer.Requests.UseItem
            Event:FireServer(A_1)
            task.wait(5)
        end
    end)
end)
if game.PlaceId == ghostworld then
    bossfarmingbox:AddToggle('thegreatboss', {
        Text = 'Auto The Great Guardian',
        Default = false, -- Default value (true / false)
        Tooltip = 'Does all the work' -- Information shown when you hover over the toggle
    })

    task.spawn(function()
        while task.wait(.1) do
            if not Toggles.thegreatboss.Value then
                repeat
                    task.wait()
                until Toggles.thegreatboss.Value
            end

            if not game:GetService("Workspace").Ghosts:FindFirstChild('The Great Guardian') then
                repeat
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                        game:GetService("Workspace").ScriptParts.MegaBossArenas["1"].WaitingArea.CFrame
                    task.wait()
                until not Toggles.thegreatboss.Value or
                    game:GetService("Workspace").Ghosts:FindFirstChild('The Great Guardian')
            end

            if game:GetService("Workspace").Ghosts:FindFirstChild('The Great Guardian') then
                repeat
                    check_vac()
                    workspace[player.Name].Corruption.Value = 69520
                    player.Character.HumanoidRootPart.CFrame =
                        game:GetService("Workspace").Ghosts:FindFirstChild('The Great Guardian').HumanoidRootPart.CFrame *
                            CFrame.new(0, 0, 10)
                    local args = {
                        [1] = workspace.Ghosts:FindFirstChild('The Great Guardian')
                    }
                    game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumFireHit:FireServer(unpack(args))
                    game:GetService("ReplicatedStorage").Network.ToServer.Requests.VacuumEnemy:FireServer(
                        game:GetService("Workspace").Ghosts:FindFirstChild('The Great Guardian'))
                    task.wait()
                until not game:GetService("Workspace").Ghosts:FindFirstChild('The Great Guardian')
            end
        end
    end)
end

-- other

local otherbox = Tabs.Other:AddLeftGroupbox('Main')

otherbox:AddButton('Universal script', function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/GSstarGamer/Roblox-Exploits/main/Ghost%20Sim-Uni.lua"))()
end)
local serverhop = otherbox:AddButton('Server hop', function()
    local Servers = game.HttpService:JSONDecode(game:HttpGet(
        "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
    for i, v in pairs(Servers.data) do
        if v.playing ~= v.maxPlayers then
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, v.id)
        end
    end
end)
serverhop:AddTooltip('Rejoin server')

local bringallstuff = otherbox:AddButton('Bring to Holes & Items', function()
    for _, v in pairs(game.Workspace.ScriptParts.FindParts:GetChildren()) do
        if v.ClassName == "Part" then
            v.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -20)
            task.wait()
        end
    end
end)
bringallstuff:AddTooltip('Will bring all holes and items')

local tpallstuff = otherbox:AddButton('TP to Holes & Items', function()
    for _, v in pairs(game.Workspace.ScriptParts.FindParts:GetChildren()) do
        if v.ClassName == "Part" then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0, 30, 0)
            wait(2)
        end
    end
end)
tpallstuff:AddTooltip('Will bring all holes and items')

Library:OnUnload(function()
    print('Unloaded!')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function()
    Library:Unload()
end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', {
    Default = 'End',
    NoUI = true,
    Text = 'Menu keybind'
})
Library.ToggleKeybind = Options.MenuKeybind
Library:SetWatermarkVisibility(false)
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({'MenuKeybind'})
ThemeManager:SetFolder('FallAngelHub')
SaveManager:SetFolder('FallAngelHub/Ghostsimulator')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
ThemeManager:ApplyTheme('Green')
