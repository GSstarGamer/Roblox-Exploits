repeat wait() until game:IsLoaded()
game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end
)

local version = 0.1

local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

local function notif(title, des, time)
    Notification:Notify(
    {Title = title, Description = des},
    {OutlineColor = Color3.fromRGB(0, 255, 139),Time = time, Type = "default"}
)
end

local function nwarn(why, solve)
Notification:Notify(
    {Title = why, Description = solve},
    {OutlineColor = Color3.fromRGB(0, 255, 139),Time = 5, Type = "image"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 166, 0)}
)
end

local function nerror(why)
Notification:Notify(
    {Title = "ERROR", Description = why},
    {OutlineColor = Color3.fromRGB(0, 255, 139),Time = 5, Type = "image"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 0, 0)}
)
end

local player = game.Players.LocalPlayer
local orginal_skyjumps = player.PlayerData.Buffs.SkyWalkBuff.Value

local function distance_find(part)
    return (part.Position - player.Character.HumanoidRootPart.Position).Magnitude
end

local function tp(part, mode, distance)
    local tween_speed
    local died = false
    if not player.Character:FindFirstChild('HumanoidRootPart') then
        repeat
            task.wait()
        until player.Character:FindFirstChild('HumanoidRootPart')
        mode = 'tween'
        died = true
    end
            
    local tween_speed
    if mode == 'instant_enem' then
        player.Character.HumanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 5, distance) * CFrame.Angles(math.rad(-90), 0, 0)
        player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    elseif mode == 'instant' then
        player.Character.HumanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 5, distance)
    elseif mode == 'tween' then
        if distance_find(part) > 1000 then
            player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            tween_speed = 7
        else
            tween_speed = 1

        end
        local hrp = player.Character.PrimaryPart
        local ts = game:GetService("TweenService")
        local tween = ts:Create(hrp,TweenInfo.new(tween_speed, Enum.EasingStyle.Linear), {CFrame = part.CFrame * CFrame.new(0, 0, distance)})
        tween:Play()
        tween.Completed:Wait()
    elseif mode == 'instantbypass' then
        game:GetService("ReplicatedStorage").Replication.ClientEvents.SetSpawnPoint:FireServer(part)
        player.Character.Humanoid.Health=0
    end
end

local islands = {}

for i, v in pairs(game:GetService("Workspace").Islands:GetChildren()) do
    table.insert(islands, v.Name)
end


local function all_gamepass()
    local things = player.GamepassesOwn

    for i, v in pairs(things:GetChildren()) do
        v.Value = true
    end
end

local function best_number(list, target) 
    local numbers = list
    local target = target
    
    -- Initialize a variable to store the closest number
    local closest = nil
    
    -- Iterate through the numbers in the list
    for _, num in pairs(numbers) do
        -- If the number is less than or equal to the target and (either the closest number is not set or the number is closer than the closest number)
        if num <= target and (closest == nil or math.abs(num - target) < math.abs(closest - target)) then
        -- Set the closest number to the current number
        closest = num
        end
    end
    return closest
end

local function close_to_quest(poss_val)
    local things = game:GetService("Workspace").Npc_Workspace.QuestGivers
    for i, folder in pairs(things:GetChildren()) do
        if folder:FindFirstChild(tostring(poss_val)) then
            return true
        elseif folder:FindFirstChild(tostring(poss_val)) then
            return false
        end
    end
end

local function deleteValueFromTable(tbl, value)
    local newTable = {}
  
    for i, v in ipairs(tbl) do
      if v ~= value then
        table.insert(newTable, v)
      end
    end
  
    return newTable
  end

local function getMax(t)
    local max = -math.huge -- start with the lowest possible number
    for _, v in pairs(t) do
      if type(v) == "number" and v > max then
        max = v
      end
    end
    return max
  end

local function get_best_quest_lvl()
    local lvl = tonumber(player.PlayerData.Experience.Level.Value)
    local things = game:GetService("Workspace").Npc_Workspace.QuestGivers
    local lvl_can_do = {}
    local poss_val


    if lvl >= 0 and lvl <= 39 then
        poss_val = 1
    elseif lvl >= 40 and lvl <= 89 then
        poss_val = 2
    elseif lvl >= 90 and lvl <= 159 then
        poss_val = 3
    elseif lvl >= 160 and lvl <= 249 then
        poss_val = 4
    elseif lvl >= 250 and lvl <= 349 then
        poss_val = 5
    elseif lvl >= 350 and lvl <= 449 then
        poss_val = 6
    elseif lvl >= 450 and lvl <= 599 then
        poss_val = 7
    elseif lvl >= 600 and lvl <= 699 then
        poss_val = 8
    elseif lvl >= 700 and lvl <= 799 then
        poss_val = 9
    elseif lvl >= 800 then
        poss_val = 10
    end


    if not close_to_quest(poss_val) then
        return {poss_val, nil, false}

    else
        for i, npc in pairs(things:GetChildren()) do
            if npc:FindFirstChild(npc.Name) then
                for i, quest in pairs(npc:FindFirstChild(npc.Name).Configuration.Quests:GetChildren()) do
                    local quest_lvl = string.gsub(quest.Name, "%D+", "")
                    table.insert(lvl_can_do, tonumber(quest_lvl))
                end
            end
        end
        if not Toggles.antiboss.Value then
            return {poss_val, 'Level ' .. best_number(lvl_can_do, lvl), true}
        else
            local new_table = deleteValueFromTable(lvl_can_do, best_number(lvl_can_do, getMax(lvl_can_do)))
            if best_number(lvl_can_do, lvl) < best_number(new_table, getMax(lvl_can_do)) then
                return {poss_val, 'Level ' .. best_number(lvl_can_do, lvl), true}
            else
                return {poss_val, 'Level ' ..best_number(new_table, getMax(lvl_can_do)) , true}
            end
        end
    end
end

local function get_quest_details()
    if player.Quest.Target.Value == 0 then
        return {nil, nil, nil}
    else
        local out_of = player.Quest.Target.Value
        local has_done = player.Quest.Progress.Value
        local npc_todo = player.Quest.NPCName.Value
        return {has_done, out_of, npc_todo}
    end
end

local function get_quest()
    if get_best_quest_lvl()[3] then
        local ohInstance1 = workspace.Npc_Workspace.QuestGivers[get_best_quest_lvl()[1]][get_best_quest_lvl()[1]]
        local ohString2 = get_best_quest_lvl()[2]
        player.PlayerGui.QuestGui.QuestFunction:InvokeServer(ohInstance1, ohString2)
    elseif not get_best_quest_lvl()[3] then
        tp(workspace.Npc_Workspace.QuestGivers[get_best_quest_lvl()[1]].Clicker, 'tween', 0)
        repeat
            pcall(function()
            local ohInstance1 = workspace.Npc_Workspace.QuestGivers[get_best_quest_lvl()[1]][get_best_quest_lvl()[1]]
            local ohString2 = get_best_quest_lvl()[2]
            player.PlayerGui.QuestGui.QuestFunction:InvokeServer(ohInstance1, ohString2)
            end)
            task.wait()
        until get_quest_details()[1] ~= nil
    end
end


local function do_current_quest()
    local things = game:GetService("Workspace")["NPC Zones"]
    for i, folder in pairs(things:GetChildren()) do
        if folder:FindFirstChild('NPCS') and #folder.NPCS:GetChildren() > 0 then
            for i, v in pairs(folder.NPCS:GetChildren()) do
                if v:FindFirstChild("NPCName") and v.NPCName.Value == get_quest_details()[3] and v:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") then
                    local highlight = Instance.new("Highlight")

                    if not v:FindFirstChild("Highlight") then
                        highlight.FillTransparency = 1
                        highlight.FillColor = Color3.fromRGB(255, 0, 0)
                        highlight.OutlineColor = Color3.fromRGB(0, 255, 139)
                        highlight.FillTransparency = 0.3    
                        highlight:Clone().Parent = v
                    end
                    tp(v.HumanoidRootPart, 'tween', 0)
                    pcall(function()
                    repeat
                        if v:FindFirstChild("HumanoidRootPart") then
                            tp(v.HumanoidRootPart, 'instant_enem', 0)
                            if not player.Character:FindFirstChild("Combat") and player.Character:FindFirstChild("Humanoid") then
                                player.Character.Humanoid:EquipTool(player.Backpack:FindFirstChild("Combat"))
                            end
                            if player.Character:FindFirstChild("Combat") then
                                player.Character.Combat.Punch:FireServer(4)
                            end 
                        end
                        task.wait()
                    until v.Humanoid.Health == 0
                end)
                end
            end
        end
    end
end
    
local function set_spawn()
    local thing = game:GetService("Workspace").Npc_Workspace["Spawn Setters"]
    for i, folder in pairs(thing:GetChildren()) do
        if folder:FindFirstChild(folder.Name) then
            game:GetService("ReplicatedStorage").Replication.ClientEvents.SetSpawnPoint:FireServer(folder.Name)
        end
    end
end

local function auto_stat(list_of_opt)
    local points = player.PlayerData.Experience.Points.Value
    local divided_stat

    if #list_of_opt == 0 then
        divided_stat = 1
    else
        divided_stat = math.round(points / #list_of_opt)
    end
    
    for i, v in pairs(list_of_opt) do
        game:GetService("ReplicatedStorage").Replication.ClientEvents.Stats_Event:FireServer(v, divided_stat)
    end
    
end

local function inf_jump(bool)
    local max = math.huge
    if bool then
        if player.PlayerData.Buffs.SkyWalkBuff.Value ~= max then
            player.PlayerData.Buffs.SkyWalkBuff.Value = max
        end
    else
        player.PlayerData.Buffs.SkyWalkBuff.Value = orginal_skyjumps
    end
end


local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'Project New World | FallAngelHub | '.. version,
    Center = true, 
    AutoShow = true,
})

local Tabs = {
    -- Creates a new tab titled Main
    creditsTAB = Window:AddTab('Credits'), 
    mainTab = Window:AddTab('Main'), 
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local creatorsbox = Tabs.creditsTAB:AddLeftGroupbox('Creators')

creatorsbox:AddButton('GS_StarGamer - Modules')
creatorsbox:AddButton('x3Fall3nAngel - Bugs') 
creatorsbox:AddButton('wally-rblx - UI')

local linksbox = Tabs.creditsTAB:AddRightGroupbox('Links')

linksbox:AddButton('Discord server', function()
    setclipboard('https://discord.gg/tbENWKpgku')
    notif('Copied', 'Discord server copied if not here is the link: https://discord.gg/tbENWKpgku', 10)
end)

local farmingbox = Tabs.mainTab:AddLeftGroupbox('Farm')

farmingbox:AddToggle('autolvl', {
    Text = 'Auto level farm',
    Default = false, -- Default value (true / false)
    Tooltip = 'Farms depending on current level', -- Information shown when you hover over the toggle
})

farmingbox:AddToggle('antiboss', {
    Text = 'No boss quests',
    Default = false, -- Default value (true / false)
    Tooltip = 'Doesnt farm boss', -- Information shown when you hover over the toggle
})

Toggles.autolvl:OnChanged(function()
    spawn(function()

        while Toggles.autolvl.Value do
                get_quest()
                if get_quest_details()[1] and get_quest_details()[2] then
                    if get_quest_details()[1] < get_quest_details()[2] then
                        set_spawn()
                        do_current_quest()
                        task.wait()
                    end
                end
            end
        task.wait()
    end)
end)

farmingbox:AddDivider()

farmingbox:AddToggle('autochest', {
    Text = 'Auto farm chests',
    Default = false, -- Default value (true / false)
    Tooltip = 'gets all chests', -- Information shown when you hover over the toggle
})

Toggles.autochest:OnChanged(function()
    spawn(function()
        while task.wait() do
            if Toggles.autochest.Value then
                for i,chest in pairs(workspace:GetChildren())do

                    if chest.Name == "Chest" and chest:FindFirstChild("Body") then
                        local startTime = tick()
                        local endTime = startTime + 1.853 -- loop for 1 second
                        while tick() < endTime do     
                            if chest:FindFirstChild("Body") then
                                tp(chest.Body, 'instant', 0) 
                            end
                            fireproximityprompt(chest.Hitbox.ProximityPrompt, 0)
                            task.wait()
                        end
                    end
                end
            end
        end
    end)
end)

local statbox = Tabs.mainTab:AddRightGroupbox('Stats')

statbox:AddDropdown('statsel', {
    Values = { 'Select an stat type', 'Combat', 'Defense', 'Fruit', 'Sword' },
    Default = 1, 
    Multi = true,

    Text = 'Stat select',
    Tooltip = 'Your list will be added', -- Information shown when you hover over the textbox
})

statbox:AddToggle('autostats', {
    Text = 'Auto split stats',
    Default = false, -- Default value (true / false)
    Tooltip = 'Splits your points into even amount and will add them to your choice', -- Information shown when you hover over the toggle
})

local selstats = {}


Options.statsel:OnChanged(function()
    selstats = {}
    for key, value in next, Options.statsel.Value do
        table.insert(selstats, key)
    end
end)

Toggles.autostats:OnChanged(function()
    spawn(function()

        while Toggles.autostats.Value do
            auto_stat(selstats)
            task.wait()
        end

    end)
end)


local tpbox = Tabs.mainTab:AddLeftGroupbox('Teleport')

tpbox:AddDropdown('tpareasel', {
    Values = islands,
    Default = 'Starter Island', -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport island',
    Tooltip = 'Select an island to teleport to', -- Information shown when you hover over the textbox
})

tpbox:AddDropdown('tptype',{
    Values = {'instantbypass', 'tween'},
    Default = 'instantbypass', -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Teleport type',
    Tooltip = 'TIP instantbypass is faster if ur island is far', -- Information shown when you hover over the textbox
})

tpbox:AddButton('Teleport to island', function()
    if Options.tptype.Value == 'tween' then
        for i, v in pairs(game:GetService("Workspace").Npc_Workspace["Spawn Setters"]:GetChildren()) do
            if v.Name == Options.tpareasel.Value then
                tp(v.Clicker, Options.tptype.Value, 0)
            end
        end
    else
        tp(Options.tpareasel.Value, Options.tptype.Value, 0)
    end
end)

local playerbox = Tabs.mainTab:AddRightGroupbox('Player')

playerbox:AddToggle('infjump', {
    Text = 'Infinte Sky Walk',
    Default = false, -- Default value (true / false)
    Tooltip = 'Name says it', -- Information shown when you hover over the toggle
})

Toggles.infjump:OnChanged(function()
    spawn(function()

        while Toggles.infjump.Value do
            inf_jump(Toggles.infjump.Value)
            task.wait()
        end

    end)
end)

playerbox:AddSlider('walkspeed', {
    Text = 'Walk Speed',
    Default = tonumber(player.PlayerData.Buffs.WalkspeedBuff.Value),
    Min = 0,
    Max = 50,
    Rounding = 0,

    Compact = false, -- If set to true, then it will hide the label
})
playerbox:AddSlider('jumppower', {
    Text = 'Jump Power',
    Default = tonumber(player.PlayerData.Buffs.JumpPowerBuff.Value),
    Min = 0,
    Max = 10,
    Rounding = 0,

    Compact = false, -- If set to true, then it will hide the label
})
playerbox:AddSlider('swimspeed', {
    Text = 'Swim Speed',
    Default = tonumber(player.PlayerData.Buffs.SwimSpeedBuff.Value),
    Min = 0,
    Max = 50,
    Rounding = 0,

    Compact = false, -- If set to true, then it will hide the label
})
Options.walkspeed:OnChanged(function()
    player.PlayerData.Buffs.WalkspeedBuff.Value = Options.walkspeed.Value
end)
Options.jumppower:OnChanged(function()
    player.PlayerData.Buffs.JumpPowerBuff.Value = Options.jumppower.Value
end)
Options.swimspeed:OnChanged(function()
    player.PlayerData.Buffs.SwimSpeedBuff.Value = Options.swimspeed.Value
end)
playerbox:AddButton('Invisibility', function()
    player.Character.LowerTorso:destroy()
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
Library:SetWatermarkVisibility(false)
MenuGroup:AddButton('Unload', function() Library:Unload() end)
Library:SetWatermarkVisibility(false)
ThemeManager:SetLibrary(Library)
ThemeManager:SetFolder('FallAngelHub')
ThemeManager:ApplyToTab(Tabs['UI Settings'])
ThemeManager:ApplyTheme('Green')