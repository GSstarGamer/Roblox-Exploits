local localtycoon = nil
local previousPosition
local player = game.Players.LocalPlayer
local username = player.Name

function tp(part)
    player.Character:WaitForChild('HumanoidRootPart').CFrame = part.CFrame
end

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

for i, tycoon in ipairs(workspace.Tycoons:getChildren()) do
    if tycoon:IsA("Folder") and tycoon.TycoonOwner.Value == username then
        localtycoon = tycoon
        break
    end
end

if localtycoon == nil then
    for i, tycoon in ipairs(workspace.Tycoons:getChildren()) do
        if tycoon:IsA("Folder") and tycoon.TycoonOwner.Value == 'None' then
            tp(tycoon.Claim.Claim)
            localtycoon = tycoon
            break
        end
    end
end

local startMoney = player.Data.Cash.Value

function sell()
    if not requireKick() then
        -- Store the current position
        previousPosition = player.Character.HumanoidRootPart
        local storage = localtycoon.StaticItems.Storage1
        local prevAmt = storage.Amt.Value
        repeat
            tp(storage)
            fireproximityprompt(storage.ProximityPrompt)
            task.wait()
        until storage.Amt.Value > prevAmt or requireKick()

        -- Teleport back to the previous position
        tp(previousPosition)
    end
end

function collect()
    if not requireKick() then
        previousPosition = player.Character.HumanoidRootPart
        local activator = localtycoon.Belts.Belt1.Activator
        local previnv = player.Data.Poop.Value

        repeat
            tp(activator)
            fireproximityprompt(localtycoon.Belts.Belt1.Collector.Prox.ProximityPrompt)
            task.wait()
        until player.Data.Poop.Value > previnv or requireKick()

        tp(previousPosition)
    end
end

function kickAll()
    previousPosition = player.Character.HumanoidRootPart
    for i, pooper in ipairs(localtycoon.Items:getChildren()) do
        if pooper:FindFirstChild('PoopReference') then
            repeat
                if pooper.NPC.HumanoidRootPart.ProximityPrompt.Enabled then
                    tp(pooper.NPC.HumanoidRootPart)
                    fireproximityprompt(pooper.NPC.HumanoidRootPart.ProximityPrompt)
                    task.wait()
                end
            until not pooper.NPC.HumanoidRootPart.ProximityPrompt.Enabled
        end
    end
end

function requireKick()
    for i, pooper in ipairs(localtycoon.Items:getChildren()) do
        if pooper:FindFirstChild('PoopReference') then
            if pooper.NPC.HumanoidRootPart.ProximityPrompt.Enabled then
                return true
            end
        end
    end
    return false
end

function unlockAllposs()
    for i, purchase in ipairs(localtycoon.Purchases:getChildren()) do
        local currentCash = player.Data.Cash.Value
        if purchase:IsA('Part') then
            if currentCash > purchase.Cost.Value and purchase.BillboardGui.Enabled then
                repeat
                    if autobuy then
                        tp(purchase)
                        task.wait(1)
                    end
                until not purchase.BillboardGui.Enabled
            end
        end
    end
end

local Window = Rayfield:CreateWindow({
    Name = "Pooper v1",
    LoadingTitle = "pooping for you...",
    LoadingSubtitle = "by GS",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "FallAngelHub",
        FileName = "SELL POOP TYCOON"
    }
})

local Tab = Window:CreateTab("Main") -- Title, Image

local farmsection = Tab:CreateSection("Farm")

local autocollectandsellT = Tab:CreateToggle({
    Name = "Auto collect & sell",
    CurrentValue = false,
    Flag = "AutoC&S", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().autocollectandsell = Value
    end
})

local autokickallT = Tab:CreateToggle({
    Name = "Auto kick all",
    CurrentValue = false,
    Flag = "Autokick", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().autokickall = Value
    end
})

local autobuyT = Tab:CreateToggle({
    Name = "Auto buy all",
    CurrentValue = false,
    Flag = "Autobuy", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().autobuy = Value
    end
})

spawn(function()
    while task.wait() do
        if autobuy then
            unlockAllposs()
        end
    end
end)

spawn(function()
    while task.wait() do
        if autokickall then
            kickAll()
        end
    end
end)

spawn(function()
    while task.wait() do
        if autocollectandsell then
            local storage = localtycoon.StaticItems.Storage1
            if storage.Amt.Value == 0 then
                collect()
                sell()
            end
        end
    end
end)

local othersection = Tab:CreateSection("Other")

local Button = Tab:CreateButton({
    Name = "Unlock sprint",
    Callback = function()
        player.Data.Sprint.Value = 1
    end
})

local Button = Tab:CreateButton({
    Name = "TP to hood",
    Callback = function()
        tp(localtycoon.Claim.Claim)
    end
})

local Button = Tab:CreateButton({
    Name = "Destroy UI",
    Callback = function()
        Rayfield:Destroy()
    end
})

local statsTab = Window:CreateTab("Stats")

local tycooninL = statsTab:CreateLabel("Tycoon: " .. localtycoon.name)
local storageL = statsTab:CreateLabel("Storage: " .. localtycoon.StaticItems.Storage1.Amt.Value .. '/' ..
                                          localtycoon.StaticItems.Storage1.Max.Value)
local collecterL = statsTab:CreateLabel("Collecter: " .. localtycoon.Belts.Belt1.Activator.Amt.Value)
local moneyEarnedL = statsTab:CreateLabel("Money earned: " .. player.Data.Cash.Value - startMoney)
local autocollectandsellDurationL = statsTab:CreateLabel('Auto farm running for ')

local autocollectandsellStartTime = tick()
local autocollectandsellActive = false
local pausedDuration = 0

local function formatDuration(duration)
    local hours = math.floor(duration / 3600)
    local minutes = math.floor((duration % 3600) / 60)
    local seconds = math.floor(duration % 60)

    return hours .. "hr " .. minutes .. "min " .. seconds .. "sec"
end

spawn(function()
    while true do
        task.wait()

        storageL:Set("Storage: " .. localtycoon.StaticItems.Storage1.Amt.Value .. '/' ..
                         localtycoon.StaticItems.Storage1.Max.Value)
        collecterL:Set("Collecter: " .. localtycoon.Belts.Belt1.Activator.Amt.Value)
        moneyEarnedL:Set("Money earned: " .. player.Data.Cash.Value - startMoney)

        local isAutocollectandsellActive = autocollectandsell

        if autocollectandsellActive then
            local duration = tick() - autocollectandsellStartTime
            autocollectandsellDurationL:Set("Auto farm running for " .. formatDuration(duration + pausedDuration))
        end

        if isAutocollectandsellActive and not autocollectandsellActive then
            autocollectandsellStartTime = tick()
        elseif not isAutocollectandsellActive and autocollectandsellActive then
            local pauseStartTime = tick()
            pausedDuration = pausedDuration + (pauseStartTime - autocollectandsellStartTime)
        end

        autocollectandsellActive = isAutocollectandsellActive
    end
end)

-- Extras

-- getgenv().SecureMode = true -- Only Set To True If Games Are Detecting/Crashing The UI

-- Rayfield:Destroy() -- Destroys UI

-- Rayfield:LoadConfiguration() -- Enables Configuration Saving

-- Section:Set("Section Example") -- Use To Update Section Text

-- Button:Set("Button Example") -- Use To Update Button Text

-- Toggle:Set(false) -- Use To Update Toggle

-- Slider:Set(10) -- Use To Update Slider Value

-- Label:Set("Label Example") -- Use To Update Label Text

-- Paragraph:Set({Title = "Paragraph Example", Content = "Paragraph Example"}) -- Use To Update Paragraph Text

-- Keybind:Set("RightCtrl") -- Keybind (string) -- Use To Update Keybind

-- Dropdown:Set("Option 2") -- The new option value -- Use To Update/Set New Dropdowns
