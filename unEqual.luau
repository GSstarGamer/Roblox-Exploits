local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()


local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'FallAngel Hub',
    Center = true, 
    AutoShow = true,
})


local Tabs = {
    -- Creates a new tab titled Main
    Main = Window:AddTab('Main'), 
    ['UI Settings'] = Window:AddTab('UI Settings'),
}
local farmingbox = Tabs.Main:AddLeftGroupbox('Farming')
local statbox = Tabs.Main:AddRightGroupbox('Stats')


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Questtable = {}
local Quest
local Abilitytable = {}
local player_list = {}

task.spawn(function()
    for i, v in pairs(game:GetService("Players"):GetChildren()) do
        table.insert(player_list, v.Name)
    end
end)

local function get_enem()
    local enem_list = {}
    for i, v in pairs(workspace.Characters:GetChildren()) do
        if not table.find(player_list, v.Name) then
            local item = string.gsub(v.Name, "%d", "")
            if not table.find(enem_list, item) then
                table.insert(enem_list, item)
            end
        end
    end
    return enem_list
end

task.spawn(function()
    for i,v in pairs(workspace.Quests:GetChildren()) do
        if v:FindFirstChild("ClickDetector") then
            table.insert(Questtable, v.Name)
        end
    end
end)

task.spawn(function()
    for i,v in pairs(ReplicatedStorage.Items:GetChildren()) do
        table.insert(Abilitytable, v.Name)
    end
end)

local function hit(num) 
    ReplicatedStorage.Combat:FireServer(num, "Basic Combat") 
end

local function GetQuest(questgiver)
    if LocalPlayer:FindFirstChild("Quest") and LocalPlayer.Quest.QuestAmt.Value == questgiver then
        return
    end
    fireclickdetector(workspace.Quests[questgiver].ClickDetector, math.huge)
    ReplicatedStorage.Quest:FireServer("yes")
end

local function Ability()
    for i,v in next, LocalPlayer.PlayerGui.MainUI.ConstantUIs.HotbarFrame.HotbarsHolder:GetChildren() do
        if v:FindFirstChild("TextLabel") and table.find(Abilitytable, v.TextLabel.Text) then
            ReplicatedStorage.Powers:FireServer(v.TextLabel.Text, 1)
            ReplicatedStorage.Powers:FireServer(v.TextLabel.Text, 2)
            ReplicatedStorage.Powers:FireServer(v.TextLabel.Text, 3)
        end
    end
end

farmingbox:AddDropdown('enemdrop', {
    Values = get_enem(),
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    
    Text = 'Select enemy',
    Tooltip = 'idk', -- Information shown when you hover over the textbox
})

local MyButton = farmingbox:AddButton('Reload list', function()
    Options.MyDropdown:SetValue(get_enem())
end)

farmingbox:AddToggle('AutoFarm', {
    Text = 'Auto farm',
    Default = false, -- Default value (true / false)
    Tooltip = 'Farm selected enemies', -- Information shown when you hover over the toggle
})

farmingbox:AddDivider()

farmingbox:AddToggle("AutoQuest", {
    Text = "Auto Quest",
    Default = false, 
    Toooltip = "Auto get selected quest"
})

farmingbox:AddDropdown('QuestDropDown', {
    Values = Questtable,
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    
    Text = 'Select Quest',
    Tooltip = '', -- Information shown when you hover over the textbox
})

farmingbox:AddDivider()

farmingbox:AddToggle("Autoability", {
    Text = "Auto Ability",
    Default = false, 
    Toooltip = "Auto get selected quest"
})


Toggles.AutoQuest:OnChanged(function()
    task.spawn(function()
        while task.wait(.1) and Toggles.AutoQuest.Value do
            GetQuest(Quest)
        end
    end)
end)

Toggles.AutoFarm:OnChanged(function()
    task.spawn(function()
        while task.wait(.1) and Toggles.AutoFarm.Value do
            for i, v in pairs(workspace.Characters:GetChildren()) do
                if string.lower(string.gsub(v.Name, "%d", "")) == string.lower(Options.enemdrop.Value) and v:FindFirstChild("Humanoid") then
                    repeat 
                        if not LocalPlayer.Character or not v:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                        LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 5)
                        hit(3)
                        if v.Humanoid.Health < v.Humanoid.MaxHealth and v:FindFirstChild("Head") then
                            v.Head:Destroy()
                        end
                        task.wait()
                    until not v:FindFirstChild("Head") or not v:FindFirstChild("Humanoid") or Toggles.AutoFarm.Value == false or not LocalPlayer.Character
                end
            end
        end
    end)
end)

Toggles.Autoability:OnChanged(function()
    task.spawn(function()
        while task.wait(.1) and Toggles.Autoability.Value do
            Ability()
        end
    end)
end)

Options.QuestDropDown:OnChanged(function(v)
    Quest = v
end)


statbox:AddToggle('strength', {
    Text = 'Auto strength',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto strength', -- Information shown when you hover over the toggle
})

statbox:AddToggle('defense', {
    Text = 'Auto defense',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto defense', -- Information shown when you hover over the toggle
})

statbox:AddToggle('sword', {
    Text = 'Auto sword',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto sword', -- Information shown when you hover over the toggle
})

statbox:AddToggle('magic', {
    Text = 'Auto magic/ability',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto magic', -- Information shown when you hover over the toggle
})

statbox:AddDivider()

statbox:AddToggle('adding', {
    Text = 'Start Adding',
    Default = false, -- Default value (true / false)
    Tooltip = 'starts to add stats to sel', -- Information shown when you hover over the toggle
})

Toggles.adding:OnChanged(function()
    task.spawn(function()
        while task.wait(.5) and Toggles.adding.Value do
            if tonumber(LocalPlayer.PlayerGui.MainUI.HiddenUIs.StatsFrame.Stats.SkillPoints) <= 0 then
                return 
            end
            if Toggles.strength.Value then
                ReplicatedStorage.AddSkillPoint:FireServer("Strength")
            elseif Toggles.defense.Value then
                ReplicatedStorage.AddSkillPoint:FireServer("Defense")
            elseif Toggles.sword.Value then
                ReplicatedStorage.AddSkillPoint:FireServer("Sword")
            elseif Toggles.magic.Value then
                ReplicatedStorage.AddSkillPoint:FireServer("Magic")
            end
        end
    end)
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = false, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager. 
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings() 

-- Adds our MenuKeybind to the ignore list 
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

-- use case for doing it this way: 
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings']) 

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config 
-- which has been marked to be one that auto loads!